name: build-push
on: workflow_dispatch
env:
  DOCKER_BUILDKIT: 1
  REGISTRY: ghcr.io
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
      id-token: write
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Extract Node.js version from package.json
        id: node-version
        run: |
          echo "NODE_VERSION=$(node -p "require('./package.json').engines.node.replace('>=', '')")" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node-version.outputs.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Extract versions from package.json files
        id: version
        run: |
          echo "FRONTEND_VERSION=$(node -p "require('./apps/frontend/package.json').version")" >> $GITHUB_OUTPUT
          echo "BACKEND_VERSION=$(node -p "require('./apps/backend/package.json').version")" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if backend image exists
        id: backend-check
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.version.outputs.BACKEND_VERSION }} >/dev/null 2>&1; then
            echo "Backend image ${{ steps.version.outputs.BACKEND_VERSION }} already exists"
            echo "BACKEND_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Backend image ${{ steps.version.outputs.BACKEND_VERSION }} does not exist"
            echo "BACKEND_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if frontend image exists
        id: frontend-check
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.FRONTEND_VERSION }} >/dev/null 2>&1; then
            echo "Frontend image ${{ steps.version.outputs.FRONTEND_VERSION }} already exists"
            echo "FRONTEND_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Frontend image ${{ steps.version.outputs.FRONTEND_VERSION }} does not exist"
            echo "FRONTEND_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Backend image
        if: steps.backend-check.outputs.BACKEND_EXISTS == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker-configs/production/backend.Dockerfile
          push: true
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.version.outputs.BACKEND_VERSION }}

      - name: Build and push Frontend image
        if: steps.frontend-check.outputs.FRONTEND_EXISTS == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker-configs/production/frontend.Dockerfile
          push: true
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend
          platforms: linux/amd64,linux/arm64/v8
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ steps.version.outputs.FRONTEND_VERSION }}
